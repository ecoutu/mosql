exit
c
err
e
att[column[:name]] = (@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first||{})[:id]
(@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first||{})[:id]
att[column[:name]]
table_name =column[:seed_from_table]
column[:seed_from_table].match(/polymorphic\-/)
if column[:seed_from_table].match(/polymorphic\-/)
mongo_id = record[column[:seed_from_mongo_id].to_sym]
exit
c
att[column[:name]] = (@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first||{})[:id]
table_name = column[:seed_from_table]
mongo_id = record[column[:seed_from_mongo_id].to_sym]
c
att[column[:name]] = (@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first||{})[:id]
{id: 2}[:id]
{id: 2}.try([:id])
{id: 2}.try(:id)
@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first.try(:id)
@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first
@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first.dig(:id)
@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first
@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first[:id]
table_name = column[:seed_from_table]
mongo_id = record[column[:seed_from_mongo_id].to_sym]
column
record
exit
att[column[:name]] = @sql.db[table_name.to_sym].where(mongo_id: mongo_id).first[:id]
att = {}
attributes[column[:name]]
column[:name]
@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first[:id]
@sql.db[table_name.to_sym].where(mongo_id: mongo_id).first
@sql.db[table_name.to_sym].where(mongo_id: mongo_id)
@sql.db[table_name.to_sym]
attributes[column[:name]] = @sql.db[table_name.to_sym].where(mongo_id: mongo_id).first[:id]
table_name = column[:seed_from_table]
mongo_id.match(/\{\"\$oid\"\:\"/)
mongo_id = record[column[:seed_from_mongo_id].to_sym]
column = columns[0]
record = records[0]
record
records = @sql.db[t].all
columns = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|c| c[:seed_from_table]}
exit
attributes[column[:name]] = @sql.db[table_name.to_sym].where(mongo_id: mongo_id).first[:id]
table_name = column[:seed_from_table]
attributes[column[:name]] = @sql.db[table_name.to_sym].where(mongo_id: mongo_id).first[:id]
column[:seed_from_table]
column[:seed_from_table].match(/polymorphic\-/)
mongo_id = attributes[column[:seed_from_mongo_id].to_sym] = mongo_id.gsub(/\{\"\$oid\"\:\"|\"\}/, '')
attributes[column[:seed_from_mongo_id].to_sym] = mongo_id.gsub(/\{\"\$oid\"\:\"|\"\}/, '')
mongo_id.gsub(/\{\"\$oid\"\:\"|\"\}/, '')
mongo_id.match(/\{\"\$oid\"\:\"|\"\}/)
mongo_id.match(/\{\"\$oid\"\:\"/)
mongo_id.match(/\{\"\$oid/)
mongo_id.match(/\{\"\$oid/
mongo_id.match(/\$oid/)
mongo_id.match(/$oid/)
mongo_id = record[column[:seed_from_mongo_id].to_sym]
column[:seed_from_mongo_id]
record[column[:seed_from_mongo_id].to_sym]
column = columns[0]
attributes = {}
record = records[0]
records = @sql.db[t].all
columns = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|c| c[:seed_from_table]}
t
exit
c
record.update(attributes)
attributes[column[:name]] = @sql.db[table_name.to_sym].where(mongo_id: record[column[:seed_from_mongo_id].to_sym]).first[:id]
id = @sql.db[table_name.to_sym].where(mongo_id: record[column[:seed_from_mongo_id].to_sym]).first[:id]
id = @sql.db[table_name.to_sym].where(mongo_id: record[column[:seed_from_mongo_id].to_sym]).first
id = @sql.db[table_name.to_sym].where(mongo_id: record[column[:seed_from_mongo_id].to_sym]).first.id
id = @sql.db[table_name.to_sym].where(mongo_id: record[column[:seed_from_mongo_id]])
id = @sql.db[table_name.to_sym].where(mongo_id: record[column[:seed_from_mongo_id]]).first
id = @sql.db[table_name.to_sym].where(mongo_id: record[column[:seed_from_mongo_id]]).first.id
table_name = column[:seed_from_table]
column[:seed_from_table].match(/polymorphic\-/)
record[column[:seed_from_mongo_id].to_sym]
record[column[:seed_from_mongo_id].to_sym
record[:partner_mongo_id]
record.keys[:partner_mongo_id]
record.keys
record[column[:seed_from_mongo_id]]
column = columns[2]
record[column[:seed_from_mongo_id]]
column = columns[1]
column = columns[0]
record = records[100]
columns.count
record[column[:seed_from_mongo_id]]
column = columns[5]
record[column[:seed_from_mongo_id]]
column = columns[4]
record[column[:seed_from_mongo_id]]
column = columns[3]
record[column[:seed_from_mongo_id]]
column = columns[2]
record[column[:seed_from_mongo_id]]
column = columns[1]
record[column[:seed_from_mongo_id]]
table_name = column[:seed_from_table]
column[:seed_from_table].match(/polymorphic\-/)
column = columns[0]
attributes = {}
record = records[0]
t
records = @sql.db[t].all
c
columns.count
attributes = {}
record = records[0]
records = @sql.db[t].all
c = columns[0]
columns = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|c| c[:seed_from_table]}
c
ActiveSupport::Inflector.tableize "User"
ActiveSupport::Inflector.tabelize "User"
"User".tabelise
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).all[0][:partner_mongo_id]
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).all[0][:partner_id]
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).all[0]
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).each{|k| k.inspect}
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).all.each{|k| k.inspect}
c = columns[1]
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).all.each{|k| k.inspect}
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).each{|k| k.inspect}
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).
c = columns[0]
columns = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|c| c[:seed_from_table]}
t = @sql.db.tables.select{|t| @schema.find_ns("#{dbname}.#{t}")}[2]
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).each{|k| k.inspect}
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null")).each do |k|
@sql.db[t].where(Sequel.lit("#{c[:seed_from_mongo_id]} is not null"))
@sql.db[t].where(Sequal.lit("#{c[:seed_from_mongo_id]} is not null"))
@sql.db[t]
t
@sql.db[t].where("#{c[:seed_from_mongo_id]} is not null")
c[:seed_from_mongo_id]
c = columns[-1]
c = columns[0]
columns = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|c| c[:seed_from_table]}
t = @sql.db.tables.select{|t| @schema.find_ns("#{dbname}.#{t}")}[1]
columns = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|c| c[:seed_from_table]}
t = @sql.db.tables.select{|t| @schema.find_ns("#{dbname}.#{t}")}[0]
@sql.db.tables.select{|t| @schema.find_ns("#{dbname}.#{t}")}
table = @schema.find_ns("#{dbname}.#{t}")
t
@schema.find_ns("#{dbname}.#{t}")
columns = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|c| c[:seed_from_table]}
exit
@sql.db[t].where("#{c[:seed_from_mongo_id]} is not null")
@sql.db[:talents].where(@sql.db[t].where("#{c[:seed_from_mongo_id]} is not null"))
@sql.db[:talents]
@sql.db[:alents]
@sql.db
@sql[:talents]
@sql
db
db.from[t].where("#{c[:seed_from_mongo_id]} is not null")
DB[t].where("#{c[:seed_from_mongo_id]} is not null")
db[t].where("#{c[:seed_from_mongo_id]} is not null")
@db
@db[t].where("#{c[:seed_from_mongo_id]} is not null")
t
c[:seed_from_mongo_id] = 'timezone_mongo_id'
c[:seed_from_table] = 'timezones'
c = @schema.find_ns("#{dbname}.#{t}")[:columns].select{|x| x[:seed_from_table]}[0]
@schema.find_ns("#{dbname}.#{t}")[:columns].select{|x| x[:seed_from_table]}[0]
@schema.find_ns("#{dbname}.#{t}")[:columns].select{|x| x[:seed_from_table]}[0][:name]
@schema.find_ns("#{dbname}.#{t}")[:columns].select{|x| x[:seed_from_table]}[0].name
db[:talents].
db[:talents]
db
@schema.find_ns("#{dbname}.#{t}")[:columns].select{|x| x[:seed_from_table]}[0]
@schema.find_ns("#{dbname}.#{t}")[:columns].select{|x| x[:seed_from_table]}
@schema.find_ns("#{dbname}.#{t}")[:columns]
@schema.find_ns("#{dbname}.#{t}").columns
@schema.find_ns("#{dbname}.#{t}").coluns
@schema.find_ns("#{dbname}.#{t}")
t = :talents
@schema.find_ns("#{dbname}.#{t}")
dbname
@schema.find_ns('crowdstaffing_development_001.categories')
@schema.find_ns(:categories)
@sql.db.tables
@schema.each do |a|
@schema
@sql.db.tables
@sql
collections
